@page "/Aktiviteter/Opgavegenerator"
@using LogicLibrary.TaskGenerator
@inject IJSRuntime JS
@inject IPDFCreatorFactory pdfCreatorFactory

<PageTitle>Opgavegenerator</PageTitle>

<div class="row">
	<div class="col-12">
		<h1 class="page-title">Opgavegenerator</h1>
	</div>
</div>

<br><br><br>

<div class="row">
	<div class="col-12">
		<a class="btn btn-primary vejledning" target="_blank" href="/Vejledninger/Opgavegenerator">Vejledning</a>
	</div>
</div>

<br>

<div class="row">
	<div class="col-12">

		<EditForm class="content" method="post" Model="taskPage" OnValidSubmit="PrintPDF">
			<ObjectGraphDataAnnotationsValidator />

			<div class="row">
			
				<div class="col-3" />

				<div class="col-6 opgavegenerator-background">

					<br /> <br /> <br /> <br /> <br />

					@for(int i = 0; i < 5; i++)
					{
						var localVariableI = i;

						<div class="row">

							@for(int j = 0; j < 2; j++)
							{
								var localVariableJ = j;

								<div class="col-5">
									<select class="form-select" style="font-size: 1vw" @bind="taskPage[localVariableI*2+localVariableJ].TasksType">

										@foreach (TaskTypeEnum taskType in Enum.GetValues(typeof(TaskTypeEnum)))
										{
											<option value="@taskType">@TaskGroupModel.GetTaskTypeString(taskType)</option>
										}

									</select>
								
									<select class="form-select" style="font-size: 1vw" @bind="taskPage[localVariableI*2+localVariableJ].TasksGrade">

										<option value="@GradeEnum.Default">Vælg klassetrin</option>
										@foreach (GradeEnum grade in TaskGroupModel.GetAvailableGrades(taskPage[localVariableI * 2 + localVariableJ].TasksType))
										{
											<option value="@grade">@TaskGroupModel.GetGradeString(grade)</option>
										}
								
									</select>
										<div style="font-size: 0.8em">
										<ValidationMessage For="() => taskPage[localVariableI*2+localVariableJ].TasksType" />
										<ValidationMessage For="() => taskPage[localVariableI*2+localVariableJ].TasksGrade" />
										</div>
								</div>

								<div class="col-1"/>
							}

						</div>
						<br/> <br/> <br/>
					}

				</div>

				<div class="col-3">
					<button style="font-size: 1vw" class="btn btn-primary" type="submit">Generer opgavesæt</button>
				</div>

			</div>
			

		</EditForm>

	</div>
	
</div>


@code {
	List<TaskGroupModel> taskPage = new();


	private void AddTaskGroups()
	{
		for (int i = 0; i < 10; i++)
		{
			TaskGroupModel tempTaskGroup = new();
			taskPage.Add(tempTaskGroup);
		}
	}

	private async Task PrintPDF()
	{
		TaskPageGenerator generator = new();
		taskPage = generator.CreateTaskPage(taskPage);

		PDFCreatorTaskPage pdfCreator = new();

		var opgaveSaet = pdfCreator.CreateTaskPage(taskPage);

		byte[] data = opgaveSaet.GeneratePdf();

		await JS.InvokeVoidAsync("saveByteArray", "OpgaveSaet.pdf", data);
	}

	protected override void OnInitialized()
	{
		AddTaskGroups();
	}
}
