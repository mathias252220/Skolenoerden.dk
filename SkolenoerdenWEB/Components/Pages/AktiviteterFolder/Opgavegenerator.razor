@page "/Aktiviteter/Opgavegenerator"
@using LogicLibrary.TaskGenerator
@inject IJSRuntime JS
@inject IPDFCreatorFactory pdfCreatorFactory

<PageTitle>Opgavegenerator</PageTitle>

<section class="padding-block-100">
    <h2 class="page-title">Aktiviteter</h2>
</section>

<EditForm method="post" Model="taskPage" OnValidSubmit="PrintPDF">
    <ObjectGraphDataAnnotationsValidator />

    <div class="article">
        <h2 class="article-title">Opgavegenerator</h2>
        <div class="article-button align-self-center">
            <a href="/Vejledninger/Opgavegenerator">Vejledning</a>
        </div>

        <div class="generator-background">
            <h2 class="article-title headline">Skolenørdens opgaver</h2>

            @for (int i = 0; i < 5; i++)
            {
                var localVariableI = i;

                @for (int j = 0; j < 2; j++)
                {
                    var localVariableJ = j;
                    string localClassName = $"opgave-{i * 2 + j}";
                    <div class=@localClassName>
                        <select class="select generator-select" @bind="taskPage[localVariableI*2+localVariableJ].TasksType">

                            @foreach (TaskTypeEnum taskType in Enum.GetValues(typeof(TaskTypeEnum)))
                            {
                                <option value="@taskType">@TaskGroupModel.GetTaskTypeString(taskType)</option>
                            }

                        </select>

                        <select class="select generator-select" @bind="taskPage[localVariableI*2+localVariableJ].TasksGrade">

                            <option value="@GradeEnum.Default">Vælg klassetrin</option>
                            @foreach (GradeEnum grade in TaskGroupModel.GetAvailableGrades(taskPage[localVariableI * 2 + localVariableJ].TasksType))
                            {
                                <option value="@grade">@TaskGroupModel.GetGradeString(grade)</option>
                            }

                        </select>
                        <div>
                            <ValidationMessage For="() => taskPage[localVariableI*2+localVariableJ].TasksType" />
                            <ValidationMessage For="() => taskPage[localVariableI*2+localVariableJ].TasksGrade" />
                        </div>
                    </div>
                }
            }
        </div>

        <button class="article-button align-self-center" type="submit">Generer opgavesæt</button>

    </div>
</EditForm>


@code {
    List<TaskGroupModel> taskPage = new();


    private void AddTaskGroups()
    {
        for (int i = 0; i < 10; i++)
        {
            TaskGroupModel tempTaskGroup = new();
            taskPage.Add(tempTaskGroup);
        }
    }

    private async Task PrintPDF()
    {
        TaskPageGenerator generator = new();
        taskPage = generator.CreateTaskPage(taskPage);

        PDFCreatorTaskPage pdfCreator = new();

        var opgaveSaet = pdfCreator.CreateTaskPage(taskPage);

        byte[] data = opgaveSaet.GeneratePdf();

        await JS.InvokeVoidAsync("saveByteArray", "OpgaveSaet.pdf", data);
    }

    protected override void OnInitialized()
    {
        AddTaskGroups();
    }
}
